#!/usr/bin/env ruby

if ARGV.length < 4
  print("runtest TEST_NAME PKG_RPM NUM_ITEMS NUM_VBUCKETS VAL_SIZE [JOIN_URL] [EXTRA_SLEEP]\n")
  exit(-1)
end

print "runtest #{ARGV}\n"

$test_name    = ARGV[0]
$pkg          = ARGV[1]
$pkg_base     = $pkg.split('/')[-1].split('-')[0] # Ex: 'couchbase'
$num_items    = ARGV[2]
$num_vbuckets = ARGV[3]
$val_size     = ARGV[4] || "1000"
$join_url     = ARGV[5]
$extra_sleep  = ARGV[6]

`mkdir -p out`
$out_file = "out/#{$test_name}"
`rm -f #{$out_file}`

$time_curr = $time_start = Time.now
$time_prev = nil
$mesg_prev = nil

def step(mesg, cmd=nil, elapsed=nil)
  $time_curr = Time.now

  if $time_prev
    elapsed = $time_curr - $time_prev unless elapsed
    `echo "# #{$mesg_prev} done. elapsed: #{elapsed}" >> #{$out_file}`
  end

  `echo "# #{mesg} #{$time_curr.strftime('%Y%m%d-%H%M%S')}" >> #{$out_file}`

  $time_prev = $time_curr
  $mesg_prev = mesg

  time(cmd) if cmd
end

def time(cmd)
  system("top -u #{$pkg_base} | egrep beam.smp > /tmp/top.out &")

  `#{cmd}`

  `killall top`
  `tail -n 50 /tmp/top.out | head -n 10 >> #{$out_file}`
end

step("preparing... #{$test_name}")

`killall -9 memcached || true`

['couchbase', 'membase'].each do |x|
  `/etc/init.d/#{x}-server stop || true`
  `rpm -e #{x}-server || true`
  `rm -rf /opt/#{x}/`
end

step("installing...")

`rpm -i #{$pkg}`

sleep 5
sleep $extra_sleep.to_i if $extra_sleep

`rm -f after-install`
`wget https://raw.github.com/couchbaselabs/rampup/master/after-install`
`chmod a+x after-install`
`./after-install #{$num_vbuckets}`

step("configuring...")

if $join_url
  my_ip = `/sbin/ifconfig eth0|grep inet|awk {'print $2'}|cut -d":" -f2|head -n 1`
  `/opt/#{$pkg_base}/bin/membase rebalance -c #{$join_url} \
    -u Administrator -p password \
    --server-add=#{my_ip}`
else
  `/opt/#{$pkg_base}/bin/membase cluster-init -c 127.0.0.1 \
    --cluster-init-username=Administrator \
    --cluster-init-password=password`
  `/opt/#{$pkg_base}/bin/membase bucket-create -c 127.0.0.1 \
    -u Administrator -p password \
    --bucket=default --bucket-type=membase --bucket-password= \
    --bucket-ramsize=6440 --bucket-replica=0`
end

sleep 5
sleep $extra_sleep.to_i if $extra_sleep

`curl -vX PUT http://127.0.0.1:5984/default/_design/rampup -d @rampup.json`

step("loading-membase...", <<EOF
     DRIVE_HOST=127.0.0.1 RATIO_SETS=1.0 RATIO_CREATES=1.0 MAX_CREATES=$3 EXIT_AFTER_CREATES=1 MIN_VALUE_SIZE=#{$val_size} \
       /opt/#{$pkg_base}/bin/erl -pa . /opt/#{$pkg_base}/lib/ns_server/erlang/lib/ns_server-*/ebin \
       -eval 'rampup:drive_test(), init:stop().'
EOF
)

step("using-membase...", <<EOF
     DRIVE_HOST=127.0.0.1 RATIO_SETS=0.0 MAX_OPS=10000 \
       /opt/#{$pkg_base}/bin/erl -pa . /opt/#{$pkg_base}/lib/ns_server/erlang/lib/ns_server-*/ebin \
       -eval 'rampup:drive_test(), init:stop().'
EOF
)

step("view-building...",
     "/usr/bin/time -a -o #{$out_file} curl -v http://127.0.0.1:5984/default/_design/rampup/_view/random?limit=10")

step("view-accessing...",
     "./rampup-view.rb 127.0.0.1 10000 >> #{$out_file}")

step("stopping...",
     "/etc/init.d/#{$pkg_base}-server stop")

step("restarting...",
     "/etc/init.d/#{$pkg_base}-server start")

step("warming...")

i = 0
while i < 100000
  sleep 2
  w = `/opt/#{$pkg_base}/bin/mbstats 127.0.0.1:11210 all | grep "ep_warmup:"`
  break if w.include?('true')
  i = i + 1
end

w = `/opt/#{$pkg_base}/bin/mbstats 127.0.0.1:11210 all | grep "ep_warmup_time:"`
w = w.split(' ')[-1]

step("done...", nil, w)

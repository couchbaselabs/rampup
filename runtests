#!/usr/bin/env ruby

# example: ./runtests $package \
#            $ram_quotas,csv $replica_counts,csv \
#            $num_items,csv $nodes,csv $vbucket-range $val-size-arr \
#            [$key=val,csv]
#
$pkg = pkg = ARGV[0] # Ex: "../couchbase-server-community_x86_64_2.0.0r-289-gc0dbb43.rpm"

unless pkg
  print "usage: ./runtests $package $ram_quotas,csv $replica_counts,csv \\\n" +
        "         $num_items,csv $nodes,csv $vbucket-range $val-size-arr [$key=val,csv]\n"
  print "example: ./runtests couchbase-server*.rpm" +
        " 5000 0,1 1000,100000,1000000 1,2,3,4 1-64 128,1000,10000\n"
  print "example: ./runtests couchbase-server*.rpm" +
        " 5000 0 100000 1 1 1000\n"
  exit(-1)
end

$pkg_base = pkg.split('/')[-1]
$pkg_base = pkg_base = $pkg_base.split('-')[0]

$start = Time.now.strftime("%Y%m%d%H%M%S")

ram_quotas_arr     = (ARGV[1] || "5000").split(',').map {|x| x.to_i}
replica_counts_arr = (ARGV[2] || "0").split(',').map {|x| x.to_i}
num_items_arr      = (ARGV[3] || "100000").split(',').map {|x| x.to_i}
nodes_arr          = (ARGV[4] || "1,2,5").split(',').map {|x| x.to_i}
vbucket_range      = (ARGV[5] || "1-64").split('-').map {|x| x.to_i}

vbucket_min   = 1
vbucket_min   = vbucket_range[0] if vbucket_range.length > 1
vbucket_max   = vbucket_range[-1]
val_size_arr  = (ARGV[6] || "1000").split(',').map {|x| x.to_i}

opts = {
  'extra_sleep' => '',
  'cluster.type' => 'existing',
  'cluster.user' => 'ec2-user',
  'cluster.hosts' => '',
  'cluster.identity' => nil,
  'cluster.teardown' => 'y',
  'cluster.package-url-base' => 'http://packages.northscale.com/latestbuilds',
  'stack.PackageVerBase' => '2.0.0',
  'stack.KeyName' => 'steveyen-key',
  'stack.InstanceType' => 'm1.large'
}

(ARGV[7] || "").split(',').each {|x|
  key, val = x.split('=')
  opts[key] = val
}

$ssh = "ssh -t"
$ssh = $ssh + " -i #{opts['cluster.identity']}" if opts['cluster.identity']

def run(cmd)
  print("#{cmd}\n")
  `#{cmd}`
end

# ------------------------------------------

def test_name(pkg, ram_quota, replica_count, num_items, nodes, vbuckets, val_size, opts)
  pkg = pkg.split('/')[-1]
  # Ex: 'couchbase-server-community_x86_64_2.0.0r-289-gc0dbb43.rpm'

  pkg = pkg.split('-')[0] + '-' + pkg.split('_')[-1].split('.')[0..-2].join('.')
  # Ex: 'couchbase-2.0.0r-289-gc0dbb43'

  return ["test-#{$start}_#{pkg}",
          "#{ram_quota}-#{replica_count}-#{num_items}-#{nodes}-#{vbuckets}-#{val_size}"]
end

def stack_name(pkg, ram_quota, replica_count,
               num_items, nodes, vbuckets, val_size, opts)
  stack = test_name(pkg, ram_quota, replica_count,
                    num_items, nodes, vbuckets, val_size, opts)
  stack = stack.join('-').gsub('_', '-').gsub('.', '-')
  return stack
end

# ------------------------------------------

def prepare_cluster(pkg_in, ram_quota, replica_count,
                    num_items, nodes, vbuckets, val_size, opts)
  return nil if nodes <= 1

  if opts['cluster.type'] == 'new-stack'
    return prepare_cluster_new_stack(pkg_in, ram_quota, replica_count,
                                     num_items, nodes, vbuckets, val_size, opts)
  end

  return prepare_cluster_existing(pkg_in, ram_quota, replica_count,
                                  num_items, nodes, vbuckets, val_size, opts)
end

def teardown_cluster(pkg, ram_quota, replica_count,
                     num_items, nodes, vbuckets, val_size, opts)
  return if nodes <= 1
  return if opts['cluster.teardown'] != 'y'

  if opts['cluster.type'] == 'new-stack'
    return teardown_cluster_new_stack(pkg, ram_quota, replica_count,
                                      num_items, nodes, vbuckets, val_size, opts)
  end

  return teardown_cluster_existing(pkg, ram_quota, replica_count,
                                   num_items, nodes, vbuckets, val_size, opts)
end

# ------------------------------------------

def prepare_cluster_new_stack(pkg_in, ram_quota, replica_count,
                              num_items, nodes, vbuckets, val_size, opts)
  return nil if nodes <= 1

  # Prepare an AWS EC2 CloudFormation cluster (or a stack) with nodes number of nodes.
  #
  pkg      = pkg_in
  pkg      = pkg.split('/')[-1]
  pkg_base = pkg.split('-')[0]
  pkg_url  = "#{opts['cluster.package-url-base']}/#{pkg}"

  unless File.exists?(pkg_in)
    `wget -O #{pkg_in} #{pkg_url}`
  end

  stack    = stack_name(pkg_in, ram_quota, replica_count,
                        num_items, nodes, vbuckets, val_size, opts)
  template = "#{nodes - 1}-pack-#{pkg_base}" # Ex: '1-pack-couchbase'

  `rm -f #{template}`
  `wget https://raw.github.com/couchbaselabs/cloud-formation/master/packs/#{pkg_base}-#{opts['stack.PackageVerBase']}-64bit/#{template}`

  parameters =
    "PackageURL=#{pkg_url};" +
    "RESTPassword=password;" +
    "RAMForDefaultBucket=#{ram_quota};" +
    "UserTag=none;" +
    "ExistingClusterHostPort=host:port;" +
    "RAMPerServer=#{ram_quota};" +
    "KeyName=#{opts['stack.KeyName']};" +
    "InstanceType=#{opts['stack.InstanceType']};" +
    "NumVBuckets=#{vbuckets}"

  `cfn-create-stack #{stack} --template-file=#{template} --parameters "#{parameters}"`

  while true
    s = `cfn-describe-stacks #{stack} --show-table`.split(' ')

    # ["STACK", "vmerge-test-x", "CREATE_COMPLETE",
    #  "Template", "for", "couchbase", "server", "on", "EC2",
    #  "RESTWebConsoleURL=http://50.19.133.35:8091", "2011-08-11T23:17:16Z"]
    #
    if s[2] == "CREATE_COMPLETE"
      return s[-2].split('=')[1].split('/')[-1]
    end

    sleep(2)
  end
end

def teardown_cluster_new_stack(pkg, ram_quota, replica_count,
                               num_items, nodes, vbuckets, val_size, opts)
  return if nodes <= 1

  stack = stack_name(pkg, ram_quota, replica_count,
                     num_items, nodes, vbuckets, val_size, opts)

  `cfn-delete-stack #{stack} --force`
end

# ------------------------------------------

def prepare_cluster_existing(pkg_in, ram_quota, replica_count,
                             num_items, nodes, vbuckets, val_size, opts)
  return nil if nodes <= 1

  hosts = opts['cluster.hosts'].split('+')
  user  = opts['cluster.user']

  if nodes > hosts.length + 1
    print("ERROR: Not enough cluster.hosts (#{hosts}) for #{nodes} number of nodes.\n")
    exit(-1)
  end

  # Prepare an AWS EC2 CloudFormation cluster (or a stack) with nodes number of nodes.
  #
  pkg      = pkg_in
  pkg      = pkg.split('/')[-1]
  pkg_base = pkg.split('-')[0]
  pkg_url  = "#{opts['cluster.package-url-base']}/#{pkg}"

  teardown_cluster_existing(pkg_in, ram_quota, replica_count,
                            num_items, nodes, vbuckets, val_size, opts)

  i = 1
  while i < nodes
    host = hosts[i - 1]

    run "#{$ssh} #{user}@#{host} sudo wget -O #{pkg_in} #{pkg_url}"
    run "#{$ssh} #{user}@#{host} sudo rpm -i #{pkg_in}"
    run "#{$ssh} #{user}@#{host} rm -f after-install"
    run "#{$ssh} #{user}@#{host} wget https://raw.github.com/couchbaselabs/rampup/master/after-install"
    run "#{$ssh} #{user}@#{host} chmod a+x after-install"
    run "#{$ssh} #{user}@#{host} sudo ./after-install #{vbuckets}"

    if i == 1
      run "#{$ssh} #{user}@#{host} /opt/#{pkg_base}/bin/membase \
        cluster-init -c 127.0.0.1 \
        --cluster-init-username=Administrator \
        --cluster-init-password=password"
      run "#{$ssh} #{user}@#{host} /opt/#{pkg_base}/bin/membase \
        bucket-create -c 127.0.0.1 \
        -u Administrator -p password \
        --bucket=default --bucket-type=membase --bucket-password= \
        --bucket-ramsize=#{ram_quota} \
        --bucket-replica=#{replica_count}"
    else
      run "#{$ssh} #{user}@#{host} /opt/#{pkg_base}/bin/membase \
        server-add -c #{hosts[0]} \
        -u Administrator -p password \
        --server-add=#{host}"
    end

    i = i + 1
  end

  return hosts[0]
end

def teardown_cluster_existing(pkg_in, ram_quota, replica_count,
                              num_items, nodes, vbuckets, val_size, opts)
  return if nodes <= 1

  hosts = opts['cluster.hosts'].split('+')
  user  = opts['cluster.user']

  pkg      = pkg_in
  pkg      = pkg.split('/')[-1]
  pkg_base = pkg.split('-')[0]
  pkg_url  = "#{opts['cluster.package-url-base']}/#{pkg}"

  hosts.each do |host|
    run "#{$ssh} #{user}@#{host} sudo killall -9 memcached"
    run "#{$ssh} #{user}@#{host} sudo /etc/init.d/#{pkg_base}-server stop"
    run "#{$ssh} #{user}@#{host} sudo rpm -e #{pkg_base}-server"
    run "#{$ssh} #{user}@#{host} sudo rm -rf /opt/#{pkg_base} #{pkg_in}"
  end
end

# ------------------------------------------

ram_quotas_arr.each do |ram_quota|
  replica_counts_arr.each do |replica_count|
    nodes_arr.each do |nodes|
      i = [vbucket_min, vbucket_max].min

      while i <= vbucket_max
        num_items_arr.each do |num_items|
          val_size_arr.each do |val_size|
            test_dir, test_file = test_name(pkg, ram_quota, replica_count,
                                            num_items, nodes, i, val_size, opts)
            `mkdir -p ./out/#{test_dir}`

            test_out = "#{test_dir}/#{test_file}.out"
            print "#{test_out} ...\n"

            cluster_host_port = prepare_cluster(pkg, ram_quota, replica_count,
                                                num_items, nodes, i, val_size, opts)

            run "./runtest-#{pkg_base} #{test_out} #{pkg}" \
                " #{ram_quota} #{replica_count} #{num_items} #{i} #{val_size}" \
                " #{cluster_host_port} #{opts['extra_sleep']}"
            sleep 1

            teardown_cluster(pkg, ram_quota, replica_count,
                             num_items, nodes, i, val_size, opts)
          end
        end

        i = i * 2
      end
    end
  end
end


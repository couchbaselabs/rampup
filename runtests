#!/usr/bin/env ruby

# example: ./runtests $package $num_items,csv $nodes,csv $vbucket-range [$key=val,csv]
# example: ./runtests couchbase-server*.rpm 1000,100000,1000000 1,2,3,4 1-64
# example: ./runtests couchbase-server*.rpm 100000 1 1
#
$start = Time.now.strftime("%Y%m%d%H%M%S")

pkg = ARGV[0] # Ex: "../couchbase-server-community_x86_64_2.0.0r-289-gc0dbb43.rpm"

num_items_arr = (ARGV[1] || "100000").split(',').map {|x| x.to_i}
nodes_arr     = (ARGV[2] || "1,2,5").split(',').map {|x| x.to_i}
vbucket_range = (ARGV[3] || "1-64").split('-').map {|x| x.to_i}
vbucket_min   = 1
vbucket_min   = vbucket_range[0] if vbucket_range.length > 1
vbucket_max   = vbucket_range[-1]

opts = {
  'extra_sleep' => '',
  'stack.destroy' => 'y',
  'stack.PackageVerBase' => '2.0.0',
  'stack.PackageURLBase' => 'http://packages.northscale.com/latestbuilds',
  'stack.KeyName' => 'steveyen-key',
  'stack.InstanceType' => 'm1.large',
  'stack.RAMForDefaultBucket' => '6440'
}

(ARGV[4] || "").split(',').each {|x|
  key, val = x.split('=')
  opts[key] = val
}

def test_name(pkg, num_items, nodes, vbuckets, opts)
  pkg = pkg.split('/')[-1]
  # Ex: 'couchbase-server-community_x86_64_2.0.0r-289-gc0dbb43.rpm'
  pkg = pkg.split('-')[0] + '-' + pkg.split('_')[-1].split('.')[0..-2].join('.')
  # Ex: 'couchbase-2.0.0r-289-gc0dbb43'
  return ["test-#{$start}_#{pkg}", "#{num_items}-#{nodes}-#{vbuckets}"]
end

def stack_name(pkg, num_items, nodes, vbuckets, opts)
  stack = test_name(pkg, num_items, nodes, vbuckets, opts)
  stack = stack.join('-').gsub('_', '-').gsub('.', '-')
  return stack
end

def prepare_cluster(pkg_in, num_items, nodes, vbuckets, opts)
  return nil if nodes <= 1

  # Prepare an AWS EC2 CloudFormation cluster (or a stack) with nodes number of nodes.
  #
  pkg      = pkg_in
  pkg      = pkg.split('/')[-1] # Ex: 'couchbase-server-community_x86_64_2.0.0r-289-gc0dbb43.rpm'
  pkg_base = pkg.split('-')[0]  # Ex: 'couchbase'
  pkg_url  = "#{opts['stack.PackageURLBase']}/#{pkg}"

  unless File.exists?(pkg_in)
    `wget -O #{pkg_in} #{pkg_url}`
  end

  stack    = stack_name(pkg_in, num_items, nodes, vbuckets, opts)
  template = "#{nodes - 1}-pack-#{pkg_base}" # Ex: '1-pack-couchbase'

  `rm -f #{template}`
  `wget https://raw.github.com/couchbaselabs/cloud-formation/master/packs/#{pkg_base}-#{opts['stack.PackageVerBase']}-64bit/#{template}`

  parameters =
    "PackageURL=#{pkg_url};" +
    "RESTPassword=password;" +
    "RAMForDefaultBucket=#{opts['stack.RAMForDefaultBucket']};" +
    "UserTag=none;" +
    "ExistingClusterHostPort=host:port;" +
    "RAMPerServer=#{opts['stack.RAMForDefaultBucket']};" +
    "KeyName=#{opts['stack.KeyName']};" +
    "InstanceType=#{opts['stack.InstanceType']};" +
    "NumVBuckets=#{vbuckets}"

  `cfn-create-stack #{stack} --template-file=#{template} --parameters "#{parameters}"`

  while true
    s = `cfn-describe-stacks #{stack} --show-table`.split(' ')

    # ["STACK", "vmerge-test-x", "CREATE_COMPLETE",
    #  "Template", "for", "couchbase", "server", "on", "EC2", "RESTWebConsoleURL=http://50.19.133.35:8091", "2011-08-11T23:17:16Z"]
    #
    if s[2] == "CREATE_COMPLETE"
      return s[-2].split('=')[1].split('/')[-1]
    end

    sleep(2)
  end
end

def destroy_cluster(pkg, num_items, nodes, vbuckets, opts)
  return if nodes <= 1
  return if opts['stack.destroy'] != 'y'

  stack = stack_name(pkg, num_items, nodes, vbuckets, opts)

  `cfn-delete-stack #{stack} --force`
end

nodes_arr.each do |nodes|

  i = vbucket_min
  while i <= vbucket_max

    num_items_arr.each do |num_items|
      test_dir, test_file = test_name(pkg, num_items, nodes, i, opts)
      `mkdir -p ./out/#{test_dir}`
      test_name = "#{test_dir}/#{test_file}.out"
      print "#{test_name} ...\n"
      cluster_host_port = prepare_cluster(pkg, num_items, nodes, i, opts)
      `./runtest #{test_name} #{pkg} #{num_items} #{i} #{cluster_host_port} #{opts['extra_sleep']}`
      sleep 1
      destroy_cluster(pkg, num_items, nodes, i, opts)
    end

    i = i * 2
  end
end


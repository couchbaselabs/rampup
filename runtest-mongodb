#!/usr/bin/env ruby

if ARGV.length < 4
  print("runtest TEST_NAME MONGO RAM_QUOTA REPLICA_COUNT NUM_ITEMS NUM_VBUCKETS VAL_SIZE [SHARDS] [EXTRA_SLEEP]\n")
  exit(-1)
end

# ------------------------------------

$test_name = ARGV[0]
$top_user  = "root"
$top_patt  = "mongod"

load 'util.rb'

# ------------------------------------

# Might be a url (http://fastdl.mongodb.org/linux/mongodb-linux-x86_64-1.8.3.tgz)
# or part of a url, like: mongodb-linux-x86_64-1.8.3
#
$mongo         = ARGV[1]
$mongo_base    = $mongo.split('/')[-1].sub('.tgz', '') # Ex: 'mongodb-linux-x86_64-1.8.3'
$ram_quota     = ARGV[2]
$replica_count = ARGV[3]
$num_items     = (ARGV[4] || "1000").to_i
$num_vbuckets  = ARGV[5]
$val_size      = (ARGV[6] || "1000").to_i
$shards        = (ARGV[7] || "").split(',')
$extra_sleep   = ARGV[8]

# ------------------------------------

# sudo gem install mongo
# sudo gem install bson
# sudo gem install bson_ext
# sudo gem install SystemTimer

require 'rubygems'
require 'mongo'

OH = BSON::OrderedHash

$sharded = true

$host     = "localhost"
$dbName   = "test"
$collName = "test"
$safe     = true

# ------------------------------------

def start_mongo()
  if $sharded
    run("nohup #{$mongo_base}/bin/mongod --dbpath #{$db_path}" +
        " --port 20000 --rest &", true)
    connect(20000, 100)
    run("nohup #{$mongo_base}/bin/mongos --configdb localhost:20000 &", true)
  else
    run("nohup #{$mongo_base}/bin/mongod --dbpath #{$db_path} &", true)
  end
  sleep(2)
end

def connect(port = 27017, max_tries = 10)
  i = 0
  while i < max_tries
    begin
      print "connecting #{port}... (attempt #{i})\n"
      conn = Mongo::Connection.new($host, port, :safe => $safe)
      print "connecting #{port}... (attempt #{i}) done.\n"
      return conn
    rescue
    end
    i = i + 1
    sleep([5, i].min)
  end
  return nil
end

# ------------------------------------

step("preparing... #{$test_name}")

run "killall -9 mongod || true"
run "killall -9 mongos || true"

run "rm -rf #{$mongo_base}" # Ex: mongodb-linux-x86_64-1.8.3

unless File.exists?("#{$mongo_base}.tgz")
  if $mongo.start_with?('http://')
    run "wget -O #{$mongo_base}.tgz #{$mongo}"
  else
    run "wget -O #{$mongo_base}.tgz http://fastdl.mongodb.org/linux/#{$mongo_base}.tgz"
  end
end

# ------------------------------------

step("installing...")

run "tar -xzvf #{$mongo_base}.tgz"

$db_path = "#{$mongo_base}/data-#{$test_name}"

# ------------------------------------

step("configuring...")

run "mkdir -p #{$db_path}"

start_mongo()

if $sharded
  db = connect().db("admin")

  db.command(OH["addshard", "localhost:20000", "allowLocal", true])

  $shards.each do |shard|
    db.command(OH["addshard", shard, "allowLocal", true])
  end

  db.command(OH["enablesharding", $dbName])
  db.command(OH["shardcollection", "#{$dbName}.#{$collName}", "key", {"_id" => 1}])
end

# Pre-create collection data files.
#
coll = connect().db($dbName).collection($collName)

# ------------------------------------

step("loading-docs...",
     "./rampup-client mongo 127.0.0.1:27017" \
     " ratio_sets=1.0 ratio_creates=1.0" \
     " min_value_size=#{$val_size}" \
     " max_creates=#{$num_items} exit_after_creates=1",
     nil, $num_items)

# ------------------------------------

step("reading-docs...",
     "./rampup-client mongo 127.0.0.1:27017" \
     " ratio_sets=0.0" \
     " min_value_size=#{$val_size}" \
     " num_items=#{$num_items}" \
     " max_ops=10000",
     nil, 10000)

# ------------------------------------

step("non-index-accessing...",
     "./do-mongo-view 127.0.0.1 200 >> #{$out_file}",
     nil, 200)

# ------------------------------------

step("index-building...",
     "#{$mongo_base}/bin/mongo 127.0.0.1:27017/test ensureIndex-last.js")

# ------------------------------------

step("fsyncing...",
     "#{$mongo_base}/bin/mongo 127.0.0.1:27017/admin fsync.js")

# ------------------------------------

step("index-accessing...",
     "./do-mongo-view 127.0.0.1 10000 >> #{$out_file}",
     nil, 10000)

# ------------------------------------

step("stopping...",
     "killall -9 mongos && killall -SIGINT mongod")

# ------------------------------------

step("restarting...")

start_mongo()

# ------------------------------------

step("warming...")

coll = connect(27017, 100).db($dbName).collection($collName)

coll.find({"last" => 0}).limit(10).each {|doc| doc }

# ------------------------------------

step("index-rebuilding...",
     "#{$mongo_base}/bin/mongo 127.0.0.1:27017/test reIndex-last.js")

coll.find({"last" => 0}).limit(10).each {|doc| doc }

# ------------------------------------

step("done...",
     "killall -9 mongos && killall -SIGINT mongod")


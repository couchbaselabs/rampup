#!/usr/bin/env ruby

if ARGV.length < 4
  print("runtest TEST_NAME PKG_RPM RAM_QUOTA REPLICA_COUNT" \
        " NUM_ITEMS NUM_VBUCKETS VAL_SIZE CONCURRENCY [JOIN_URL] [key=val, ...]\n")
  exit(-1)
end

# ------------------------------------

$test_name = ARGV[0]
$top_user  = "root"
$top_patt  = "beam.smp|memcached|moxi|couchjs"

load 'util.rb'

# ------------------------------------

$pkg           = ARGV[1]
$pkg_base      = $pkg.split('/')[-1].split('-')[0] # Ex: 'couchbase'
$cli_kind      = [$pkg_base, 11211]
$cli_kind      = ['couchdb', 5984] if $pkg.include?('couchbase-single')
$ram_quota     = ARGV[2]
$replica_count = ARGV[3]
$num_items     = ARGV[4]
$num_vbuckets  = ARGV[5].to_i
$val_size      = ARGV[6] || "1000"
$concurrency   = (ARGV[7] || "10").to_i
$join_url      = ARGV[8]

$opts = {}
(ARGV[9] || "").split(',').each {|x|
  key, val = x.split('=')
  $opts[key] = val
}

$extra_sleep = $opts['extra_sleep']

index = true
index = false if $pkg_base == 'membase'

$du_path = "/opt/#{$pkg_base}/var"

# ------------------------------------

step("preparing... #{$test_name}")

run "sudo killall -9 memcached || true"

['couchbase', 'membase'].each do |x|
  run "sudo /etc/init.d/#{x}-server stop || true"
  if $opts['install'] != 'n'
      run "sudo rpm -e #{x}-server || true"
      run "sudo rm -rf /opt/#{x}/"
  end
end

# ------------------------------------
  if $opts['install'] != 'n'
     step("installing...")
     run "sudo rpm -i #{$pkg}"

     sleep 5
     sleep $extra_sleep.to_i if $extra_sleep
   end

run "rm -f after-install"
run "wget https://raw.github.com/couchbaselabs/rampup/master/after-install"
run "chmod a+x after-install"
run "sudo ./after-install #{$num_vbuckets}"

# ------------------------------------

step("configuring...")

if $join_url and $join_url.length > 0 and $join_url != "none"
  sleep(3)
  my_ip = `/sbin/ifconfig eth0|grep inet|awk {'print $2'}|cut -d":" -f2|head -n 1`
  run "/opt/#{$pkg_base}/bin/membase server-add -c #{$join_url} \
    -u Administrator -p password \
    --server-add=#{my_ip}"
  sleep(3)
  run "/opt/#{$pkg_base}/bin/membase rebalance -c #{$join_url} \
    -u Administrator -p password"
else
  sleep(3)
  run "/opt/#{$pkg_base}/bin/membase cluster-init -c 127.0.0.1 \
    --cluster-init-username=Administrator \
    --cluster-init-password=password"
  sleep(3)
  run "/opt/#{$pkg_base}/bin/membase bucket-create -c 127.0.0.1 \
    -u Administrator -p password \
    --bucket=default --bucket-type=membase --bucket-password= \
    --bucket-ramsize=#{$ram_quota} --bucket-replica=#{$replica_count}"
end

sleep 15
sleep $extra_sleep.to_i if $extra_sleep

if $cli_kind[0] == 'couchdb' and $num_vbuckets > 1
  (0..($num_vbuckets - 1)).each do |partition|
    run "curl -vX PUT http://127.0.0.1:5984/default%2F#{partition}"
  end
end

def load_design_doc(kind)
  if $cli_kind[0] == 'couchdb' and $num_vbuckets > 1
    run "curl -vX PUT http://127.0.0.1:5984/default%2Fmaster"
    run "curl -vX PUT http://127.0.0.1:5984/default%2Fmaster/_design/rampup-#{kind} -d @index/rampup-#{kind}.json"
  else
    run "curl -vX PUT http://127.0.0.1:5984/default"
    run "curl -vX PUT http://127.0.0.1:5984/default/_design/rampup-#{kind} -d @index/rampup-#{kind}.json"
  end

  sleep 1
end

load_design_doc('last')

# ------------------------------------

bulk_load_batch = 100

step("loading-docs...",
     "./rampup-client #{$cli_kind[0]} 127.0.0.1:#{$cli_kind[1]}" \
     " ratio_sets=1.0 ratio_creates=1.0" \
     " min_value_size=#{$val_size}" \
     " max_creates=#{$num_items} exit_after_creates=1" \
     " num_vbuckets=#{$num_vbuckets}" \
     " bulk_load_batch=#{bulk_load_batch}",
     nil, $num_items)

# ------------------------------------

step("loading-persisted...")

def wait_until_queue_drained()
  i = 0
  while i < 100000
    w = `/opt/#{$pkg_base}/bin/mbstats 127.0.0.1:11210 all | egrep "ep_queue_size|ep_flusher_todo"`
    w = w.strip.split(/[\s\n\t]+/).select {|x| !x.include?(':') and x != '0' }
    break if w.empty?
    i = i + 1
    sleep 0.1
  end
end

proc_stats_start()

wait_until_queue_drained()

proc_stats_end()

# ------------------------------------

step("reading-docs...",
     "./rampup-client #{$cli_kind[0]} 127.0.0.1:#{$cli_kind[1]}" \
     " ratio_sets=0.0" \
     " min_value_size=#{$val_size}" \
     " num_items=#{$num_items}" \
     " num_vbuckets=#{$num_vbuckets}" \
     " max_ops=10000",
     nil, 10000)

# ------------------------------------

def capture_response(name)
  return $out_file + "_#{name}.res"
end

if index
  num_views = 10000

  step("pre-index-build-quiescing...")
  sleep 5

  # ------------------------------------

  def index_cmd(name)
    index_build_cmd = "curl -v http://127.0.0.1:5984/default/_design/rampup-#{name}/_view/#{name}?limit=10"
    index_access = "_view"

    if $cli_kind[0] == 'couchdb' and $num_vbuckets > 1
      index_build_cmd = "curl -v \"http://127.0.0.1:5984/default/_design/rampup-#{name}/_set_view/#{name}?limit=10\&partitions=#{$num_vbuckets}\""
      index_access = "_set_view"
    end

    return index_build_cmd, index_access
  end

  # ------------------------------------

  index_build_cmd, index_access = index_cmd("last")

  step("index-building...",
       index_build_cmd)

  print("index_build_cmd: #{index_build_cmd}\n")

  # ------------------------------------

  step("index-accessing...",
       "./do-couch-view 127.0.0.1 #{num_views} last gte #{index_access} #{capture_response("index-accessing")} >> #{$out_file}",
       nil, num_views)

  step("index-accessing2...",
       "./do-couch-view 127.0.0.1 #{num_views} last gte #{index_access} #{capture_response("index-accessing2")} >> #{$out_file}",
       nil, num_views)

  step("index-eq-accessing...",
       "./do-couch-view 127.0.0.1 #{num_views} last eq #{index_access} #{capture_response("index-eq-accessing")} >> #{$out_file}",
       nil, num_views)

  step("index-eq-accessing2...",
       "./do-couch-view 127.0.0.1 #{num_views} last eq #{index_access} #{capture_response("index-eq-accessing2")} >> #{$out_file}",
       nil, num_views)

  # ------------------------------------

  step("index-mid-design...")

  load_design_doc('mid')

  # ------------------------------------

  index_build_cmd, index_access = index_cmd("mid")

  step("index-mid-building...",
       index_build_cmd)

  # ------------------------------------

  step("index-mid-accessing...",
       "./do-couch-view 127.0.0.1 #{num_views} mid gte #{index_access} #{capture_response("index-mid-accessing")} >> #{$out_file}",
       nil, num_views)

  step("index-mid-accessing2...",
       "./do-couch-view 127.0.0.1 #{num_views} mid gte #{index_access} #{capture_response("index-mid-accessing2")} >> #{$out_file}",
       nil, num_views)

  step("index-mid-eq-accessing...",
       "./do-couch-view 127.0.0.1 #{num_views} mid eq #{index_access} #{capture_response("index-mid-eq-accessing")} >> #{$out_file}",
       nil, num_views)

  step("index-mid-eq-accessing2...",
       "./do-couch-view 127.0.0.1 #{num_views} mid eq #{index_access} #{capture_response("index-mid-eq-accessing2")} >> #{$out_file}",
       nil, num_views)

  # ------------------------------------

  step("index-lastCount-design...")

  load_design_doc('lastCount')

  # ------------------------------------

  index_build_cmd, index_access = index_cmd("lastCount")

  step("index-lastCount-building...",
       index_build_cmd)

  # ------------------------------------

  step("index-lastCount-accessing...",
       "./do-couch-view 127.0.0.1 #{num_views} lastCount gte #{index_access} #{capture_response("index-lastCount-accessing")} >> #{$out_file}",
       nil, num_views)

  # ------------------------------------

  step("index-mid-erlang-design...")

  load_design_doc('mid-erlang')

  # ------------------------------------

  index_build_cmd, index_access = index_cmd("mid-erlang")

  step("index-mid-erlang-building...",
       index_build_cmd)
end

# ------------------------------------

if $cli_kind[0] != 'couchdb'
  ops_per_concurrent_client = 10000

  step("concurrent-usage...",
       nil, nil, $concurrency * ops_per_concurrent_client)

  proc_stats_start()

  pids = (1..$concurrency).map do |x|
    fork do
      run("./rampup-client #{$cli_kind[0]} 127.0.0.1:#{$cli_kind[1]}" \
          " min_value_size=#{$val_size}" \
          " num_items=#{$num_items}" \
          " num_vbuckets=#{$num_vbuckets}" \
          " max_ops=#{ops_per_concurrent_client}")
      exit
    end
  end

  pids.map {|pid| [pid, Process.wait2(pid)] }

  proc_stats_end()

  # ------------------------------------

  step("concurrent-usage-draining...")

  wait_until_queue_drained()

  # ------------------------------------

  step("index-mutating...")

  killall("rampup-client")

  # Concurrently do some item mutations.
  #
  pid = fork do
    run("./rampup-client #{$cli_kind[0]} 127.0.0.1:#{$cli_kind[1]}" \
        " min_value_size=#{$val_size}" \
        " ratio_sets=1.0" \
        " ratio_creates=0.0" \
        " num_items=#{$num_items}" \
        " num_vbuckets=#{$num_vbuckets}" \
        " max_ops=#{$num_items}")
    exit
  end

  proc_stats_start()

  run("./do-couch-view 127.0.0.1 #{num_views} last gte #{index_access} #{capture_response("index-mutating")} >> #{$out_file}")

  proc_stats_end()

  killall("rampup-client")

  # ------------------------------------

  step("index-mutating-draining...")

  wait_until_queue_drained()
end

# ------------------------------------

step("stopping...",
     "sudo /etc/init.d/#{$pkg_base}-server stop")

# ------------------------------------

step("stopping-quiesce...")

sleep 5

# ------------------------------------

step("restarting...",
     "sudo /etc/init.d/#{$pkg_base}-server start")

# ------------------------------------

step("warming...")

w = 0

if File.exists?("/opt/#{$pkg_base}/bin/mbstats")
  proc_stats_start()

  i = 0
  while i < 100000
    sleep 2
    w = `/opt/#{$pkg_base}/bin/mbstats 127.0.0.1:11210 all | grep "ep_warmup_thread:"`
    w = w.split(' ')[-1]
    break if w == "complete"
    i = i + 1
  end

  proc_stats_end()

  w = `/opt/#{$pkg_base}/bin/mbstats 127.0.0.1:11210 all | grep "ep_warmup_time:"`
  w = (w.split(' ')[-1] || "0").to_i / 1000000 # ep_warmup_time is in microseconds.
end

# ------------------------------------

if index and not ($cli_kind[0] == 'couchdb' and $num_vbuckets > 1)
  step("index-rebuilding...", nil, w)

  run('curl -H "Content-Type: application/json"' +
      ' -X POST http://localhost:5984/default/_compact/rampup-last')

  proc_stats_start()

  i = 0
  while i < 100000
    h = `curl -X GET http://127.0.0.1:5984/default/_design/rampup-last/_info`
    break if h.include?('"compact_running":false')
    sleep 1
    i = i + 1
  end

  proc_stats_end()
end

# ------------------------------------

if File.exists?("/opt/#{$pkg_base}/bin/membase")

  # ------------------------------------

  step("bucket-delete...",
       "/opt/#{$pkg_base}/bin/membase bucket-delete -c 127.0.0.1 \
          -u Administrator -p password \
          --bucket=default")

  sleep(2)

  # ------------------------------------

  step("bucket-create...",
       "/opt/#{$pkg_base}/bin/membase bucket-create -c 127.0.0.1 \
          -u Administrator -p password \
          --bucket=default --bucket-type=membase --bucket-password= \
          --bucket-ramsize=#{$ram_quota} --bucket-replica=#{$replica_count}")

  sleep(2)

  # ------------------------------------

  clog_num_items = 100000

  step("clogging...", nil, nil, clog_num_items)

  proc_stats_start()

  run("/opt/#{$pkg_base}/bin/mbflushctl 127.0.0.1:11210 stop")

  run("./rampup-client #{$cli_kind[0]} 127.0.0.1:#{$cli_kind[1]}" \
      " ratio_sets=1.0 ratio_creates=1.0" \
      " min_value_size=#{$val_size}" \
      " max_creates=#{clog_num_items} exit_after_creates=1" \
      " bulk_load_batch=#{bulk_load_batch}")

  proc_stats_end()

  # ------------------------------------

  step("unclogging...", nil, nil, clog_num_items)

  run("/opt/#{$pkg_base}/bin/mbflushctl 127.0.0.1:11210 start")

  proc_stats_start()

  wait_until_queue_drained()

  proc_stats_end()

end

# ------------------------------------

step("done...",
     "sudo /etc/init.d/#{$pkg_base}-server stop")

run("killall -9 heart")
run("killall -9 couchdb")
run("killall -9 beam.smp")
run("killall -9 epmd")


#!/usr/bin/env ruby

if ARGV.length < 4
  print("runtest TEST_NAME PKG_RPM RAM_QUOTA REPLICA_COUNT NUM_ITEMS NUM_VBUCKETS VAL_SIZE [JOIN_URL] [EXTRA_SLEEP]\n")
  exit(-1)
end

# ------------------------------------

$test_name = ARGV[0]
$top_user  = "root"
$top_patt  = "beam.smp"

load 'util.rb'

# ------------------------------------

$pkg           = ARGV[1]
$pkg_base      = $pkg.split('/')[-1].split('-')[0] # Ex: 'couchbase'
$cli_kind      = [$pkg_base, 11211]
$cli_kind      = ['couchdb', 5984] if $pkg.include?('couchbase-single')
$ram_quota     = ARGV[2]
$replica_count = ARGV[3]
$num_items     = ARGV[4]
$num_vbuckets  = ARGV[5]
$val_size      = ARGV[6] || "1000"
$join_url      = ARGV[7]
$extra_sleep   = ARGV[8]

# ------------------------------------

step("preparing... #{$test_name}")

run "sudo killall -9 memcached || true"

['couchbase', 'membase'].each do |x|
  run "sudo /etc/init.d/#{x}-server stop || true"
  run "sudo rpm -e #{x}-server || true"
  run "sudo rm -rf /opt/#{x}/"
end

# ------------------------------------

step("installing...")

run "sudo rpm -i #{$pkg}"

sleep 5
sleep $extra_sleep.to_i if $extra_sleep

run "rm -f after-install"
run "wget https://raw.github.com/couchbaselabs/rampup/master/after-install"
run "chmod a+x after-install"
run "sudo ./after-install #{$num_vbuckets}"

# ------------------------------------

step("configuring...")

if $join_url
  my_ip = `/sbin/ifconfig eth0|grep inet|awk {'print $2'}|cut -d":" -f2|head -n 1`
  run "/opt/#{$pkg_base}/bin/membase rebalance -c #{$join_url} \
    -u Administrator -p password \
    --server-add=#{my_ip}"
else
  run "/opt/#{$pkg_base}/bin/membase cluster-init -c 127.0.0.1 \
    --cluster-init-username=Administrator \
    --cluster-init-password=password"
  run "/opt/#{$pkg_base}/bin/membase bucket-create -c 127.0.0.1 \
    -u Administrator -p password \
    --bucket=default --bucket-type=membase --bucket-password= \
    --bucket-ramsize=#{$ram_quota} --bucket-replica=#{$replica_count}"
end

sleep 15
sleep $extra_sleep.to_i if $extra_sleep

if $cli_kind[0] == 'couchdb'
  run "curl -vX PUT http://127.0.0.1:5984/default"
  sleep 1
end

run "curl -vX PUT http://127.0.0.1:5984/default/_design/rampup -d @rampup.json"

# ------------------------------------

step("loading-docs...",
     "./rampup-client #{$cli_kind[0]} 127.0.0.1:#{$cli_kind[1]}" \
     " ratio_sets=1.0 ratio_creates=1.0" \
     " min_value_size=#{$val_size}" \
     " max_creates=#{$num_items} exit_after_creates=1" \
     " bulk_load_batch=100",
     nil, $num_items)

# ------------------------------------

step("loading-persisted...")

i = 0
while i < 100000
  w = `/opt/#{$pkg_base}/bin/mbstats 127.0.0.1:11210 all | egrep "ep_queue_size|ep_flusher_todo"`
  w = w.strip.split(/[\s\n\t]+/).select {|x| !x.include?(':') and x != '0' }
  break if w.empty?
  i = i + 1
  sleep 0.1
end

# ------------------------------------

step("reading-docs...",
     "./rampup-client #{$cli_kind[0]} 127.0.0.1:#{$cli_kind[1]}" \
     " ratio_sets=0.0" \
     " min_value_size=#{$val_size}" \
     " num_items=#{$num_items}" \
     " max_ops=10000",
     nil, 10000)

# ------------------------------------

step("index-building...",
     "/usr/bin/time -a -o #{$out_file}" \
     " curl -v http://127.0.0.1:5984/default/_design/rampup/_view/last?limit=10")

# ------------------------------------

step("index-accessing...",
     "./do-couch-view 127.0.0.1 10000 >> #{$out_file}",
     nil, 10000)

# ------------------------------------

step("stopping...",
     "sudo /etc/init.d/#{$pkg_base}-server stop")

# ------------------------------------

step("restarting...",
     "sudo /etc/init.d/#{$pkg_base}-server start")

# ------------------------------------

step("warming...")

i = 0
while i < 100000
  sleep 2
  w = `/opt/#{$pkg_base}/bin/mbstats 127.0.0.1:11210 all | grep "ep_warmup:"`
  w = w.split(' ')[-1]
  break if w.nil? or w == "1" or w == "true"
  i = i + 1
end

w = `/opt/#{$pkg_base}/bin/mbstats 127.0.0.1:11210 all | grep "ep_warmup_time:"`
w = w.split(' ')[-1]

# ------------------------------------

step("index-rebuilding...",
     'curl -H "Content-Type: application/json"' +
     ' -X POST http://localhost:5984/default/_compact/rampup',
     w)

i = 0
while i < 100000
  h = `curl -X GET http://127.0.0.1:5984/default/_design/rampup/_info`
  break if h.include?('"compact_running":false')
  sleep 1
  i = i + 1
end

# ------------------------------------

step("done...",
     "sudo /etc/init.d/#{$pkg_base}-server stop")

run("killall -9 heart")
run("killall -9 couchdb")
run("killall -9 beam.smp")

#!/usr/bin/env ruby

require 'net/http'
require 'uri'
require 'digest/md5'
require 'rubygems'

$cfg_defaults = {
  :prefix => "",           # Prefix for every item key.
  :max_ops => 0,           # Max number of requests (sets and gets) before exiting.
  :max_creates => 10000,   # Total items to create.
  :min_value_size => 10,   # Minimal value size in bytes during SET's.
  :ratio_sets => 0.1,      # Fraction of requests that should be SET's.
  :ratio_creates => 0.1,   # Fraction of SET's that should create new items.
  :ratio_misses => 0.05,   # Fraction of GET's that should miss.
  :ratio_hot => 0.2,       # Fraction of items to have as a hot item subset.
  :ratio_hot_sets => 0.95, # Fraction of SET's that hit the hot item subset.
  :ratio_hot_gets => 0.95, # Fraction of GET's that hit the hot item subset.
  :bulk_load_batch => 1,   # When > 1, use batched bulk load optimization,
                           # if appropriate, flushing after this many inserts.
  :exit_after_creates => 0, # Exit after max_creates is reached.
  :num_vbuckets => 0
}

$cur_defaults = {
  :num_items   => 0, # Number of items known to be in the bucket.
  :num_sets    => 0,
  :num_creates => 0, # Number of sets that were creates.
  :num_gets    => 0
}

if ARGV.length < 2
  print("usage: rampup-client <couchdb|mongo|memcached> host:port [key=val[ key=val[ ...]]]\n")
  print("\n")
  print("optional key=val's and their defaults are...\n")
  ($cfg_defaults.keys + $cur_defaults.keys).map {|x| x.to_s}.sort.each do |k|
    print("  #{k.ljust(20)} = #{$cfg_defaults[k.to_sym] || $cur_defaults[k.to_sym]}\n")
  end
  print("\n")
  exit(-1)
end

# ----------------------------------------------------------------

def out(msg)
  print(msg)
end

# ----------------------------------------------------------------

class Cfg
  $cfg_defaults.each_pair {|k, v| attr_accessor(k) }
end

class Cur
  $cur_defaults.each_pair {|k, v| attr_accessor(k) }
end

# ----------------------------------------------------------------

cfg = Cfg.new
cur = Cur.new

[[cfg, $cfg_defaults],
 [cur, $cur_defaults]].each do |obj, defaults|
  defaults.each_pair {|k, v| obj.send((k.to_s + '=').to_sym, v) }
  (ARGV[2..-1] || []).each do |kv|
    k, v = kv.split('=')
    unless defaults[k.to_sym].nil?
      v = v.to_f if v == v.to_f.to_s
      v = v.to_i if v == v.to_i.to_s
      obj.send((k + '=').to_sym, v)
    end
  end
end

if cfg.ratio_sets < 1.0 or
   cfg.ratio_creates < 1.0
  cfg.bulk_load_batch = 1 # Use bulk_load_batch optimization only if 100% creates.
end

($cfg_defaults.keys).map {|x| x.to_s}.sort.each do |k|
  print("  #{k.ljust(20)} = #{cfg.send(k.to_sym)}\n")
end

($cur_defaults.keys).map {|x| x.to_s}.sort.each do |k|
  print("  #{k.ljust(20)} = #{cur.send(k.to_sym)}\n")
end

print("\n")

# ----------------------------------------------------------------

$body = 'x';
while $body.length < cfg.min_value_size
  $body = $body + Digest::MD5.hexdigest($body.length.to_s)
end

$suffix = "\"body\":\"#{$body}\"}"

def gen_doc_hash(key_num, key_str, min_value_size)
  return { "_id"     => key_str,
           "key_num" => key_num,
           "mid"     => key_str[-8..-2],
           "last"    => key_str[-1..-1],
           "body"    => $body
         }
end

def gen_doc_string(key_num, key_str, min_value_size, key_name = "key")
  return "{\"#{key_name}\":\"#{key_str}\"," \
          "\"key_num\":#{key_num}," \
          "\"mid\":\"#{key_str[-8..-2]}\"," \
          "\"last\":\"#{key_str[-1..-1]}\"," +
         $suffix
end

# ----------------------------------------------------------------

class Store
  def connect(target, cfg)
  end

  def command(cmd, key_num, key_str, data, bulk_load_batch = 1)
    out("#{cmd} #{key_num} #{key_str} #{data}\n")
  end

  def flush()
  end

  def gen_doc(key_num, key_str, min_value_size)
    gen_doc_string(key_num, key_str, min_value_size)
  end

  def cmd_line_get(key_num, key_str)
    return key_str
  end
end

class StoreCouchDB < Store
  def connect(target, cfg) # host:port
    @target = target
    @http = Net::HTTP.new(target.split(':')[0],
                          target.split(':')[1].to_i)
    @bulk = {}
    @num_vbuckets = cfg.num_vbuckets
  end

  def command(cmd, key_num, key_str, data, bulk_load_batch = 1)
    partition = ""
    if @num_vbuckets > 1
      partition = "%2F#{key_num.modulo(@num_vbuckets)}"
    end

    case cmd
    when :get
      uri = URI.parse("http://#{@target}/default#{partition}/#{key_str}")
      request = Net::HTTP::Get.new(uri.request_uri)
      return @http.request(request)
    when :set
      if bulk_load_batch > 1
        @bulk[partition] ||= []
        @bulk[partition] << data
        if @bulk[partition].length > bulk_load_batch
          flush
        end
      else
        uri = URI.parse("http://#{@target}/default#{partition}/#{key_str}")
        request = Net::HTTP::Put.new(uri.request_uri)
        request.body = data
        return @http.request(request)
      end
    else
      print("ERROR: unknown StoreCouchDB cmd: #{cmd}\n")
      exit(-1)
    end
  end

  def flush()
    @bulk.each_pair do |partition, docs|
      uri = URI.parse("http://#{@target}/default#{partition}/_bulk_docs")
      request = Net::HTTP::Post.new(uri.request_uri)
      request['Content-Type'] = "application/json"
      request.body = "{\"docs\":[#{docs.join(',')}]}"
      @http.request(request)
    end

    @bulk = {}
  end

  def gen_doc(key_num, key_str, min_value_size)
    gen_doc_string(key_num, key_str, min_value_size, key_name = "_id")
  end

  def cmd_line_get(key_num, key_str)
    partition = ""
    if @num_vbuckets > 1
      partition = "%2F#{key_num.modulo(@num_vbuckets)}"
    end

    return "curl http://#{@target}/default#{partition}/#{key_str}"
  end
end

class StoreMemCache < Store
  require 'memcache'

  def connect(target, cfg) # host:port
    @target = target
    @conn   = MemCache.new([target])
  end

  def command(cmd, key_num, key_str, data, bulk_load_batch = 1)
    case cmd
    when :get
      return @conn.get(key_str)
    when :set
      return @conn.set(key_str, data, 0, true) # Raw is true.
    else
      print("ERROR: unknown StoreMemCache cmd: #{cmd}\n")
      exit(-1)
    end
  end

  def cmd_line_get(key_num, key_str)
    return "echo get #{key_str} | nc #{@target.split(':').join(' ')}"
  end
end

class StoreDalli < Store
  require 'dalli'

  def connect(target, cfg) # host:port
    @target = target
    @conn   = Dalli::Client.new([target])
    @opts   = { :raw => true }
  end

  def command(cmd, key_num, key_str, data, bulk_load_batch = 1)
    case cmd
    when :get
      return @conn.get(key_str)
    when :set
      return @conn.set(key_str, data, nil, @opts)
    else
      print("ERROR: unknown StoreDalli cmd: #{cmd}\n")
      exit(-1)
    end
  end

  def cmd_line_get(key_num, key_str)
    return "echo get #{key_str} | nc #{@target.split(':').join(' ')}"
  end
end

class StoreMongo < Store
  # sudo gem install mongo
  # sudo gem install bson
  # sudo gem install bson_ext
  # sudo gem install SystemTimer

  require 'mongo'

  def connect(target, cfg) # host:port/dbName/collName
    hp, dbName, collName = target.split('/')
    @host = (hp.split(':')[0] || 'localhost')
    @port = (hp.split(':')[1] || '27017').to_i
    @dbName   = dbName   || 'test'
    @collName = collName || 'test'

    @conn = Mongo::Connection.new(@host, @port, :safe => true)
    @db   = @conn.db(@dbName)
    @coll = @db.collection(@collName)
  end

  def command(cmd, key_num, key_str, data, bulk_load_batch = 1)
    case cmd
    when :get
      return @coll.find_one({"_id" => key_str})
    when :set
      return @coll.update({"_id" => key_str}, data, {:upsert => true})
    else
      print("ERROR: unknown StoreMongo cmd: #{cmd}\n")
      exit(-1)
    end
  end

  def gen_doc(key_num, key_str, min_value_size)
    gen_doc_hash(key_num, key_str, min_value_size)
  end
end

# ----------------------------------------------------------------

def run(cfg, cur, store)
  while true
    num_ops = cur.num_gets + cur.num_sets

    return "max_ops-reached" if (cfg.max_ops > 0 and
                                 cfg.max_ops <= num_ops)

    return "max_creates-reached" if (cfg.exit_after_creates > 0 and
                                     cfg.max_creates > 0 and
                                     cfg.max_creates <= cur.num_creates)

    req_cmd, req_key_num, req_key_str, req_data,
      expect_status, expect_data =
        next_cmd(cfg, cur, store)

    cmd_beg = Time.new
    store.command(req_cmd, req_key_num, req_key_str, req_data, cfg.bulk_load_batch)
    cmd_end = Time.new
    cmd_amt = cmd_end - cmd_beg
  end

  cmd_beg = Time.new
  store.flush()
  cmd_end = Time.new
  cmd_amt = cmd_end - cmd_beg
end

def next_cmd(cfg, cur, store)
  # This function modifies cur.
  #
  num_items = cur.num_items
  num_gets  = cur.num_gets
  num_sets  = cur.num_sets

  num_sets_pos = 1
  num_sets_pos = num_sets if num_sets > 1

  num_ops = num_gets + num_sets
  num_ops_pos = 1
  num_ops_pos = num_ops if num_ops > 1

  do_set = cfg.ratio_sets > num_sets.to_f / num_ops_pos
  if do_set
    # SET...
    cur.num_sets += 1

    do_set_create = (cfg.max_creates > num_items and
                     cfg.ratio_creates > 0 and
                     cfg.ratio_creates > num_items.to_f / num_sets_pos)
    if do_set_create
      # Create...
      cur.num_items += 1
      cur.num_creates += 1
      key_num = num_items
    else
      # Update...
      key_num = choose_key_num(num_items, cfg.ratio_hot, cfg.ratio_hot_sets, num_sets)
    end

    key_str = prepare_key(key_num, cfg.prefix)
    itm_val = store.gen_doc(key_num, key_str, cfg.min_value_size)

    return :set, key_num, key_str, itm_val,
           :success, nil
  else
    # GET...
    cur.num_gets += 1

    do_get_hit = (cfg.ratio_misses * 100) < num_gets.modulo(100)
    if do_get_hit
      key_num = choose_key_num(num_items, cfg.ratio_hot, cfg.ratio_hot_gets, num_gets)
      key_str = prepare_key(key_num, cfg.prefix)
      itm_val = store.gen_doc(key_num, key_str, cfg.min_value_size)

      return :get, key_num, key_str, nil,
             :success, itm_val
    else
      return :get, -1, prepare_key(-1, cfg.prefix), nil,
             :missing, "Not found"
    end
  end
end

# ----------------------------------------------------------------

def choose_key_num(num_items, ratio_hot, ratio_hot_choice, num_ops)
  hit_hot_range = (ratio_hot_choice * 100) > num_ops.modulo(100)
  if hit_hot_range
    base  = 0
    range = (ratio_hot * num_items).floor
  else
    base  = (ratio_hot * num_items).floor
    range = ((1.0 - ratio_hot) * num_items).floor
  end
  range = 1 if range < 1
  return base + num_ops.modulo(range)
end

$collisions = {}

def prepare_key(key_num, prefix)
  key_hash = Digest::MD5.hexdigest(key_num.to_s)[0..15]

  if false
    prev = $collisions[key_hash]
    if prev and prev != key_num
      print("collision: #{key_num} #{prev}\n")
      exit(-1)
    end
    $collisions[key_hash] = key_num
  end

  return "#{prefix}-#{key_hash}" if prefix and prefix.length > 0
  return "#{key_hash}"
end

# ----------------------------------------------------------------

case ARGV[0].downcase
when 'none'
  store = Store.new
when 'couchdb'
  store = StoreCouchDB.new
when 'mongo'
  store = StoreMongo.new
when 'memcached-memcache'
  store = StoreMemCache.new
else
  store = StoreDalli.new
end

store.connect(ARGV[1], cfg)

# ----------------------------------------------------------------

print("First 5 keys...\n")
(0..5).each do |x|
  print(store.cmd_line_get(x, prepare_key(x, cfg.prefix)) + "\n")
end

print("\n")

# ----------------------------------------------------------------

run(cfg, cur, store)
